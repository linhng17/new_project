# app_danh_gia_du_an.py

import streamlit as st
import pandas as pd
import numpy as np
from google import genai
from google.genai.errors import APIError
import json 
from io import BytesIO

# C·∫ßn c√†i th√™m th∆∞ vi·ªán python-docx n·∫øu mu·ªën ƒë·ªçc file Word
try:
    import docx
except ImportError:
    # N·∫øu ch∆∞a c√†i, s·∫Ω c·∫£nh b√°o khi ng∆∞·ªùi d√πng t·∫£i file .docx
    docx = None 

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh üìä")
st.markdown("S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu, cho ph√©p ƒëi·ªÅu ch·ªânh th·ªß c√¥ng v√† ph√¢n t√≠ch hi·ªáu qu·∫£ d·ª± √°n.")

# ****************************** KHU V·ª∞C H√ÄM X·ª¨ L√ù ******************************

# 1. H√†m Tr√≠ch xu·∫•t D·ªØ li·ªáu b·∫±ng AI (Y√™u c·∫ßu 1)
def extract_financial_data(project_text, api_key):
    """S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh quan tr·ªçng."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'

        # TƒÉng c∆∞·ªùng h∆∞·ªõng d·∫´n ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·∫ßu ra CH·ªà l√† JSON h·ª£p l·ªá
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y tr√≠ch xu·∫•t c√°c th√¥ng tin sau t·ª´ vƒÉn b·∫£n b√°o c√°o d·ª± √°n kinh doanh ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y. 
        ƒê·∫ßu ra ph·∫£i l√† m·ªôt **JSON object** ho√†n ch·ªânh v√† h·ª£p l·ªá.

        **QUY T·∫ÆC B·∫ÆT BU·ªòC:**
        1. KH√îNG BAO G·ªíM B·∫§T K·ª≤ L·ªúI M·ªû ƒê·∫¶U, K·∫æT LU·∫¨N, HO·∫∂C VƒÇN B·∫¢N N√ÄO KH√ÅC NGO√ÄI JSON object.
        2. N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, h√£y ƒëi·ªÅn gi√° tr·ªã 0.0 (float) ho·∫∑c 0 (integer).
        
        C√°c th√¥ng tin c·∫ßn tr√≠ch xu·∫•t (T√™n tr∆∞·ªùng: Ki·ªÉu d·ªØ li·ªáu mong mu·ªën):
        - V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (Capital_Investment): float (V√≠ d·ª•: 1000000.0)
        - V√≤ng ƒë·ªùi d·ª± √°n (Project_Life_Years): integer (V√≠ d·ª•: 5)
        - Doanh thu h√†ng nƒÉm (Annual_Revenue): float (V√≠ d·ª•: 500000.0)
        - Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (Annual_Operating_Cost): float (V√≠ d·ª•: 200000.0)
        - T·ª∑ su·∫•t chi·∫øt kh·∫•u WACC (WACC_Rate_Percent): float (V√≠ d·ª•: 10.5)
        - Thu·∫ø su·∫•t Thu nh·∫≠p Doanh nghi·ªáp (Tax_Rate_Percent): float (V√≠ d·ª•: 20.0)
        
        VƒÉn b·∫£n b√°o c√°o d·ª± √°n:
        ---
        {project_text}
        ---
        
        Tr·∫£ l·ªùi CH·ªà B·∫∞NG JSON, KH√îNG C√ì C√ÅC K√ù T·ª∞ BAO QUANH NH∆Ø '```json' HAY '```'.
        """
        
        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        
        raw_text = response.text.strip()
        
        # X·ª≠ l√Ω c√°c k√Ω t·ª± th·ª´a ph·ªï bi·∫øn nh∆∞ '```json'
        if raw_text.startswith("```json"):
            raw_text = raw_text.replace("```json", "", 1)
        if raw_text.endswith("```"):
            raw_text = raw_text.rstrip("`")
        
        raw_text = raw_text.strip()
        
        json_data = json.loads(raw_text)
        return json_data

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error(f"L·ªói: AI kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng JSON. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªânh s·ª≠a vƒÉn b·∫£n d·ª± √°n. Chu·ªói nh·∫≠n ƒë∆∞·ª£c: \n\n{raw_text}")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return None

# 2 & 3. H√†m X√¢y d·ª±ng D√≤ng ti·ªÅn v√† T√≠nh ch·ªâ s·ªë (Y√™u c·∫ßu 2 & 3)
@st.cache_data
def calculate_cash_flow_and_metrics(data):
    """
    X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn v√† t√≠nh to√°n c√°c ch·ªâ s·ªë NPV, IRR, PP, DPP.
    """
    
    # √âp ki·ªÉu d·ªØ li·ªáu (L·∫•y t·ª´ d·ªØ li·ªáu ƒë√£ qua ƒëi·ªÅu ch·ªânh th·ªß c√¥ng)
    I0 = data.get('Capital_Investment', 0.0)
    T = int(data.get('Project_Life_Years', 0))
    R = data.get('Annual_Revenue', 0.0)
    C = data.get('Annual_Operating_Cost', 0.0)
    WACC = data.get('WACC_Rate_Percent', 0.0) / 100.0
    Tax_Rate = data.get('Tax_Rate_Percent', 0.0) / 100.0

    if T <= 0 or I0 <= 0 or WACC <= 0:
        return None, None, "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá (V√≤ng ƒë·ªùi, V·ªën ƒë·∫ßu t∆∞, WACC ph·∫£i l·ªõn h∆°n 0)."

    # T√≠nh D√≤ng ti·ªÅn Thu·∫ßn Ho·∫°t ƒë·ªông h√†ng nƒÉm (NCF)
    EBIT = R - C
    Tax_Amount = EBIT * Tax_Rate if EBIT > 0 else 0 
    NCF_Annual = EBIT - Tax_Amount 
    
    # X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn
    years = range(T + 1)
    cash_flows = [-I0] + [NCF_Annual] * T 
    discount_factors = [1 / ((1 + WACC) ** t) for t in years]
    discounted_cash_flows = [cf * df for cf, df in zip(cash_flows, discount_factors)]

    df_cf = pd.DataFrame({
        'NƒÉm': years,
        'D√≤ng ti·ªÅn (CF)': cash_flows,
        'H·ªá s·ªë Chi·∫øt kh·∫•u': discount_factors,
        'D√≤ng ti·ªÅn Chi·∫øt kh·∫•u (DCF)': discounted_cash_flows
    })

    # T√≠nh to√°n c√°c ch·ªâ s·ªë
    NPV = sum(discounted_cash_flows)
    
    try:
        IRR = np.irr(cash_flows)
    except ValueError:
        IRR = np.nan
    
    # PP (Th·ªùi gian ho√†n v·ªën) & DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    cumulative_cf = np.cumsum(cash_flows)
    pp_year = np.argmax(cumulative_cf >= 0) 
    
    if pp_year > 0 and cash_flows[pp_year] != 0:
        prev_year_cf = cumulative_cf[pp_year - 1]
        this_year_cf = cash_flows[pp_year]
        PP = pp_year - 1 + abs(prev_year_cf) / this_year_cf
    else:
        PP = np.nan
        
    cumulative_dcf = np.cumsum(discounted_cash_flows)
    dpp_year = np.argmax(cumulative_dcf >= 0)
    
    if dpp_year > 0 and discounted_cash_flows[dpp_year] != 0:
        prev_year_dcf = cumulative_dcf[dpp_year - 1]
        this_year_dcf = discounted_cash_flows[dpp_year]
        DPP = dpp_year - 1 + abs(prev_year_dcf) / this_year_dcf
    else:
        DPP = np.nan
        
    metrics = {
        "V·ªën ƒê·∫ßu t∆∞ Ban ƒë·∫ßu": I0,
        "V√≤ng ƒë·ªùi D·ª± √°n (NƒÉm)": T,
        "WACC": WACC,
        "L√£i su·∫•t IRR": IRR,
        "Gi√° tr·ªã Hi·ªán t·∫°i R√≤ng (NPV)": NPV,
        "Th·ªùi gian Ho√†n v·ªën (PP)": PP,
        "Th·ªùi gian Ho√†n v·ªën Chi·∫øt kh·∫•u (DPP)": DPP,
        "D√≤ng ti·ªÅn Thu·∫ßn Ho·∫°t ƒë·ªông h√†ng nƒÉm (NCF)": NCF_Annual,
    }
    
    return df_cf, metrics, None


# 4. H√†m Ph√¢n t√≠ch Ch·ªâ s·ªë b·∫±ng AI (Y√™u c·∫ßu 4)
# (Kh√¥ng thay ƒë·ªïi)
def analyze_metrics_with_ai(metrics_data, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë ƒë√°nh gi√° d·ª± √°n ƒë·∫øn AI ƒë·ªÉ ph√¢n t√≠ch."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        metrics_text = "\n".join([f"- {k}: {v:,.2f}" if isinstance(v, (int, float)) and v is not np.nan else f"- {k}: {v}" for k, v in metrics_data.items()])

        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ª± √°n ƒë·∫ßu t∆∞. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra m·ªôt ƒë√°nh gi√° chuy√™n s√¢u v√† kh√°ch quan (kho·∫£ng 3-4 ƒëo·∫°n). 
        
        **ƒê√°nh gi√° c·∫ßn t·∫≠p trung v√†o:**
        1. **Kh·∫£ nƒÉng sinh l·ªùi:** Nh·∫≠n x√©t v·ªÅ NPV v√† so s√°nh IRR v·ªõi WACC (ch·ªâ s·ªë WACC ƒë√£ ƒë∆∞·ª£c cung c·∫•p).
        2. **T√≠nh kh·∫£ thi:** K·∫øt lu·∫≠n d·ª± √°n c√≥ n√™n ƒë∆∞·ª£c ch·∫•p nh·∫≠n hay kh√¥ng (D·ª±a tr√™n NPV > 0 v√† IRR > WACC).
        3. **R·ªßi ro thanh kho·∫£n:** ƒê√°nh gi√° th·ªùi gian ho√†n v·ªën (PP v√† DPP) so v·ªõi v√≤ng ƒë·ªùi d·ª± √°n.

        C√°c ch·ªâ s·ªë t√†i ch√≠nh c·ªßa d·ª± √°n:
        ---
        {metrics_text}
        ---
        
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi y√™u c·∫ßu ph√¢n t√≠ch AI: {e}"

# ****************************** KHU V·ª∞C GIAO DI·ªÜN STREAMLIT ******************************

# --- Thanh b√™n c·∫•u h√¨nh API ---
with st.sidebar:
    st.header("üîë C·∫•u h√¨nh API")
    api_key_input = st.text_input(
        "Nh·∫≠p Kh√≥a API Google Gemini",
        type="password",
        help="Kh√≥a API n√†y c·∫ßn ƒë∆∞·ª£c l∆∞u tr·ªØ b·∫£o m·∫≠t (V√≠ d·ª•: trong Streamlit Secrets)."
    )
    if not api_key_input:
        st.warning("Vui l√≤ng nh·∫≠p Kh√≥a API Gemini ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")

# --- Ch·ª©c nƒÉng 1: T·∫£i File/Nh·∫≠p VƒÉn b·∫£n ---
st.subheader("1. T·∫£i l√™n v√† Tr√≠ch xu·∫•t D·ªØ li·ªáu D·ª± √°n (AI)")
uploaded_file = st.file_uploader(
    "T·∫£i l√™n file Word (.docx) ho·∫∑c Text (.txt) c√≥ ch·ª©a th√¥ng tin d·ª± √°n.",
    type=['docx', 'txt']
)

project_text_area = st.text_area(
    "Ho·∫∑c d√°n n·ªôi dung b√°o c√°o d·ª± √°n v√†o ƒë√¢y:",
    height=300,
    placeholder="D√°n to√†n b·ªô vƒÉn b·∫£n d·ª± √°n c·ªßa kh√°ch h√†ng v√†o ƒë√¢y. ƒê·∫£m b·∫£o c√≥ c√°c th√¥ng tin v·ªÅ V·ªën ƒë·∫ßu t∆∞, V√≤ng ƒë·ªùi, Doanh thu, Chi ph√≠, WACC, Thu·∫ø."
)

project_text = ""
if uploaded_file is not None:
    if uploaded_file.type == "text/plain":
        project_text = uploaded_file.read().decode("utf-8")
    elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        if docx:
            try:
                doc = docx.Document(BytesIO(uploaded_file.read()))
                project_text = "\n".join([p.text for p in doc.paragraphs])
            except Exception as e:
                st.error(f"L·ªói ƒë·ªçc file Word: {e}")
                project_text = ""
        else:
            st.warning("C·∫£nh b√°o: C·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán 'python-docx' ƒë·ªÉ ƒë·ªçc file Word.")
            project_text = ""
    
    if project_text:
        st.text_area("N·ªôi dung ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file:", value=project_text, height=100)
    
if project_text_area:
    project_text = project_text_area

# --- N√∫t L·ªçc D·ªØ li·ªáu ---
if st.button("üöÄ L·ªçc D·ªØ li·ªáu D·ª± √°n b·∫±ng AI", disabled=not (project_text and api_key_input)):
    
    if not api_key_input:
        st.error("Vui l√≤ng cung c·∫•p Kh√≥a API Gemini.")
    elif not project_text:
        st.error("Vui l√≤ng t·∫£i file ho·∫∑c d√°n n·ªôi dung d·ª± √°n.")
    else:
        # X√≥a session state c≈©
        if 'extracted_data' in st.session_state:
            del st.session_state['extracted_data']
            
        with st.spinner('ƒêang g·ª≠i vƒÉn b·∫£n v√† ch·ªù AI tr√≠ch xu·∫•t th√¥ng tin...'):
            extracted_data = extract_financial_data(project_text, api_key_input)
            
            if extracted_data:
                # L∆∞u d·ªØ li·ªáu th√¥ v√†o session state
                st.session_state['extracted_data'] = extracted_data
                st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng! ‚úÖ")
            else:
                st.session_state['extracted_data'] = None

# --- Ch·ª©c nƒÉng 1.5: ƒêi·ªÅu ch·ªânh Th·ªß c√¥ng ---
if 'extracted_data' in st.session_state and st.session_state['extracted_data']:
    
    st.markdown("---")
    st.subheader("1.5. ƒêi·ªÅu ch·ªânh Th·ªß c√¥ng D·ªØ li·ªáu D·ª± √°n")
    st.warning("Vui l√≤ng ki·ªÉm tra v√† ƒëi·ªÅu ch·ªânh c√°c gi√° tr·ªã tr√≠ch xu·∫•t (ho·∫∑c ƒëi·ªÅn th·ªß c√¥ng n·∫øu AI th·∫•t b·∫°i) tr∆∞·ªõc khi t√≠nh to√°n.")
    
    data = st.session_state['extracted_data']
    
    # Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu AI tr√≠ch xu·∫•t th·∫•t b·∫°i ho·∫∑c tr·∫£ v·ªÅ 0
    I0 = data.get('Capital_Investment', 0.0)
    T = data.get('Project_Life_Years', 0)
    R = data.get('Annual_Revenue', 0.0)
    C = data.get('Annual_Operating_Cost', 0.0)
    WACC_rate = data.get('WACC_Rate_Percent', 0.0)
    Tax_rate = data.get('Tax_Rate_Percent', 0.0)
    
    # S·ª≠ d·ª•ng st.columns v√† st.number_input ƒë·ªÉ ng∆∞·ªùi d√πng ƒëi·ªÅu ch·ªânh
    col1, col2, col3 = st.columns(3)
    
    with col1:
        data['Capital_Investment'] = st.number_input(
            "üí∞ V·ªën ƒê·∫ßu t∆∞ Ban ƒë·∫ßu (I0)", value=float(I0), min_value=0.0, step=1000000.0, format="%.0f", key="input_I0"
        )
        data['Annual_Revenue'] = st.number_input(
            "üìà Doanh thu H√†ng nƒÉm", value=float(R), min_value=0.0, step=100000.0, format="%.0f", key="input_R"
        )
    
    with col2:
        data['Project_Life_Years'] = st.number_input(
            "‚è≥ V√≤ng ƒë·ªùi D·ª± √°n (NƒÉm)", value=int(T), min_value=1, step=1, key="input_T"
        )
        data['Annual_Operating_Cost'] = st.number_input(
            "üìâ Chi ph√≠ H√†ng nƒÉm", value=float(C), min_value=0.0, step=100000.0, format="%.0f", key="input_C"
        )
    
    with col3:
        data['WACC_Rate_Percent'] = st.number_input(
            "‚öñÔ∏è T·ª∑ su·∫•t Chi·∫øt kh·∫•u (WACC, %)", value=float(WACC_rate), min_value=0.0, max_value=100.0, step=0.1, key="input_WACC"
        )
        data['Tax_Rate_Percent'] = st.number_input(
            "üèõÔ∏è Thu·∫ø su·∫•t Thu nh·∫≠p DN (%)", value=float(Tax_rate), min_value=0.0, max_value=100.0, step=0.1, key="input_Tax"
        )

    # C·∫≠p nh·∫≠t session state v·ªõi d·ªØ li·ªáu ƒë√£ ƒëi·ªÅu ch·ªânh
    st.session_state['extracted_data'] = data
    
    # --- Ch·ª©c nƒÉng T√≠nh to√°n (Ch·∫°y sau khi c√≥ d·ªØ li·ªáu ƒë√£ ƒëi·ªÅu ch·ªânh) ---
    df_cash_flow, metrics, error = calculate_cash_flow_and_metrics(st.session_state['extracted_data'])

    if error:
        st.error(f"L·ªói t√≠nh to√°n: {error}")
    elif df_cash_flow is not None:
        
        st.markdown("---")
        
        ## 2. B·∫£ng D√≤ng ti·ªÅn c·ªßa D·ª± √°n
        st.subheader("2. B·∫£ng D√≤ng ti·ªÅn v√† D√≤ng ti·ªÅn Chi·∫øt kh·∫•u")
        st.dataframe(df_cash_flow.style.format({
            'D√≤ng ti·ªÅn (CF)': '{:,.0f}',
            'H·ªá s·ªë Chi·∫øt kh·∫•u': '{:.4f}',
            'D√≤ng ti·ªÅn Chi·∫øt kh·∫•u (DCF)': '{:,.0f}'
        }), use_container_width=True, hide_index=True)

        st.markdown("---")
        
        ## 3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n
        st.subheader("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")

        col_npv, col_irr, col_pp, col_dpp = st.columns(4)
        
        def display_metric(col, label, value, format_str=""):
            if value is not np.nan and value is not None:
                if label == "NPV":
                    delta = "D·ª± √°n Kh·∫£ thi (Ch·∫•p nh·∫≠n)" if value > 0 else "D·ª± √°n Kh√¥ng kh·∫£ thi (T·ª´ ch·ªëi)"
                    delta_color = "inverse" if value > 0 else "off"
                    col.metric(f"üí∞ {label}", f"{value:{format_str}}", delta=delta, delta_color=delta_color)
                elif label == "IRR":
                    col.metric(f"üìà {label} (Internal Rate of Return)", f"{value:{format_str}}")
                elif "Ho√†n v·ªën" in label:
                     col.metric(f"‚è≥ {label}", f"{value:.2f} nƒÉm")
                else:
                    col.metric(label, f"{value:{format_str}}")
            else:
                 col.metric(label, "N/A")

        display_metric(col_npv, "NPV", metrics["Gi√° tr·ªã Hi·ªán t·∫°i R√≤ng (NPV)"], ",.0f")
        display_metric(col_irr, "IRR", metrics["L√£i su·∫•t IRR"], ".2%")
        display_metric(col_pp, "Th·ªùi gian Ho√†n v·ªën (PP)", metrics["Th·ªùi gian Ho√†n v·ªën (PP)"])
        display_metric(col_dpp, "Th·ªùi gian Ho√†n v·ªën Chi·∫øt kh·∫•u (DPP)", metrics["Th·ªùi gian Ho√†n v·ªën Chi·∫øt kh·∫•u (DPP)"])

        st.markdown(f"**T·ª∑ su·∫•t Chi·∫øt kh·∫•u (WACC):** {metrics['WACC']:.2%} | **V√≤ng ƒë·ªùi D·ª± √°n:** {metrics['V√≤ng ƒë·ªùi D·ª± √°n (NƒÉm)']} nƒÉm")

        st.markdown("---")
        
        ## 4. Ph√¢n t√≠ch Ch·ªâ s·ªë b·∫±ng AI
        st.subheader("4. Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë")

        if st.button("ü§ñ Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n"):
             if api_key_input:
                with st.spinner('ƒêang g·ª≠i c√°c ch·ªâ s·ªë v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                    ai_analysis_result = analyze_metrics_with_ai(metrics, api_key_input)
                    st.markdown("### K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI")
                    st.info(ai_analysis_result)
             else:
                st.error("Vui l√≤ng nh·∫≠p Kh√≥a API Gemini ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch.")
                
else:
    st.info("Vui l√≤ng t·∫£i l√™n file ho·∫∑c d√°n n·ªôi dung d·ª± √°n v√† b·∫•m n√∫t **L·ªçc D·ªØ li·ªáu D·ª± √°n b·∫±ng AI** ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
